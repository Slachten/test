# Installation de monitoring de base
print_message "Installation d'outils de monitoring..."
apt install -y prometheus node-exporter prometheus-node-exporter netdata monit

# Configuration de netdata pour accès local uniquement
sed -i 's/bind to = \*:19999/bind to = localhost:19999/g' /etc/netdata/netdata.conf 2>/dev/null || true

# Configuration de monit
cat > /etc/monit/conf.d/system << 'EOL'
# Surveillance de base du système avec monit

# Surveillance de l'utilisation CPU
check system $HOST
    if loadavg (1min) > 4 then alert
    if loadavg (5min) > 2 then alert
    if memory usage > 85% then alert
    if swap usage > 25% then alert
    if cpu usage (user) > 70% for 2 cycles then alert
    if cpu usage (system) > 40% for 2 cycles then alert

# Surveillance du disque
check filesystem rootfs with path /
    if space usage > 85% then alert

# Surveillance des services essentiels
check process sshd with pidfile /var/run/sshd.pid
    start program = "/etc/init.d/ssh start"
    stop program = "/etc/init.d/ssh stop"
    if failed port 22 protocol ssh for 2 cycles then restart

check process cron with pidfile /var/run/crond.pid
    start program = "/etc/init.d/cron start"
    stop program = "/etc/init.d/cron stop"
    if 5 restarts within 5 cycles then timeout
EOL

# Redémarrer monit
systemctl restart monit || true

print_success "Outils de monitoring installés"

# Installation d'une interface Web simple pour le monitoring
print_message "Installation d'une interface Web simple pour le monitoring..."

# Installer Apache ou Nginx si ce n'est pas déjà fait
if ! command -v apache2 &> /dev/null && ! command -v nginx &> /dev/null; then
    apt install -y nginx
fi

# Configuration d'un proxy Nginx pour netdata
if command -v nginx &> /dev/null; then
    cat > /etc/nginx/sites-available/monitoring << 'EOL'
server {
    listen 80;
    server_name monitoring;

    location / {
        root /var/www/monitoring;
        index index.html;
    }

    location /netdata/ {
        proxy_pass http://localhost:19999/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /prometheus/ {
        proxy_pass http://localhost:9090/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }

    location /monit/ {
        proxy_pass http://localhost:2812/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }

    # Configuration d'authentification basique
    auth_basic "Accès restreint";
    auth_basic_user_file /etc/nginx/monitoring.htpasswd;
}
EOL

    # Créer un mot de passe pour l'accès au monitoring
    print_message "Création d'un utilisateur pour l'accès au monitoring..."
    apt install -y apache2-utils
    htpasswd -c -b /etc/nginx/monitoring.htpasswd admin admin123
    print_warning "Utilisateur de monitoring créé: admin / admin123"
    print_warning "N'oubliez pas de changer ce mot de passe!"

    # Créer un répertoire pour la page d'accueil
    mkdir -p /var/www/monitoring
    cat > /var/www/monitoring/index.html << 'EOL'
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Monitoring Système</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 20px;
            background-color: #f5f5f5;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background-color: white;
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }
        h1 {
            color: #333;
            text-align: center;
        }
        .dashboard {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }
        .card {
            background-color: #f9f9f9;
            border-radius: 5px;
            padding: 20px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            transition: transform 0.3s ease;
        }
        .card:hover {
            transform: translateY(-5#!/bin/bash

# Script d'installation pour administrateur système
# Installe et configure les outils essentiels pour une machine Debian/Ubuntu
# Outils: zsh, oh-my-zsh, lsd, bat, micro, htop, tmux, neofetch, etc.
# Version: 1.1

set -e

# Vérifier si le script est exécuté avec bash
if [ -z "$BASH_VERSION" ]; then
    echo "Ce script doit être exécuté avec bash. Exécutez: bash $0"
    exit 1
fi

# Couleurs pour les messages
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages
print_message() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCÈS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[AVERTISSEMENT]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERREUR]${NC} $1"
}

# Vérifier si l'utilisateur est root
if [ "$(id -u)" -ne 0 ]; then
    print_error "Ce script doit être exécuté en tant que root"
    exit 1
fi

# Charger les variables de configuration
CONFIG_DIR="/etc/sysadmin"
mkdir -p "$CONFIG_DIR"

# Fonction pour sauvegarder une configuration
backup_config() {
    local file="$1"
    if [ -f "$file" ]; then
        local backup="$file.backup-$(date +%Y%m%d-%H%M%S)"
        cp "$file" "$backup"
        print_message "Sauvegarde de $file créée: $backup"
    fi
}

# Détection de la distribution
if [ -f /etc/os-release ]; then
    . /etc/os-release
    DISTRO=$ID
    DISTRO_VERSION=$VERSION_ID
    print_message "Distribution détectée: $DISTRO $DISTRO_VERSION"
else
    print_warning "Impossible de détecter la distribution, on suppose Debian/Ubuntu"
    DISTRO="debian"
fi

# Mettre à jour le système
print_message "Mise à jour du système..."
apt update && apt upgrade -y
print_success "Système mis à jour"

# Installation des dépendances essentielles
print_message "Installation des dépendances..."
apt install -y curl wget git build-essential unzip apt-transport-https ca-certificates software-properties-common gnupg
print_success "Dépendances installées"

# Installation des outils de base pour admin sys
print_message "Installation des outils de base pour l'administration système..."
apt install -y htop net-tools dnsutils iputils-ping traceroute nmap iotop iftop ncdu tree ranger tldr fd-find ripgrep jq rsync mtr-tiny \
    iperf3 glances nethogs multitail ccze lnav ncdu sysstat atop vnstat iotop ethstatus ethtool tcpdump inotify-tools tmux-plugin-manager
print_success "Outils de base installés"

# Installation de ZSH
print_message "Installation de ZSH..."
apt install -y zsh
print_success "ZSH installé"

# Installation de Oh-My-Zsh
print_message "Installation de Oh-My-Zsh..."
if [ -d "/root/.oh-my-zsh" ]; then
    print_warning "Oh-My-Zsh semble déjà installé pour root"
else
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
    print_success "Oh-My-Zsh installé pour root"
fi

# Installation de Powerlevel10k (thème ZSH)
print_message "Installation du thème Powerlevel10k pour ZSH..."
git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/themes/powerlevel10k
print_success "Powerlevel10k installé"

# Installation des plugins ZSH
print_message "Installation des plugins ZSH..."
git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions
git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting
git clone https://github.com/zsh-users/zsh-completions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-completions
print_success "Plugins ZSH installés"

# Installation de lsd (ls deluxe - alternative à ls)
print_message "Installation de lsd..."
if command -v lsd &> /dev/null; then
    print_warning "lsd est déjà installé"
else
    # Pour Debian/Ubuntu on télécharge le paquet .deb
    ARCH=$(dpkg --print-architecture)
    LSD_VERSION="0.23.1"
    LSD_DEB="lsd_${LSD_VERSION}_${ARCH}.deb"
    
    wget https://github.com/Peltoche/lsd/releases/download/${LSD_VERSION}/${LSD_DEB}
    dpkg -i ${LSD_DEB}
    rm ${LSD_DEB}
    print_success "lsd installé"
fi

# Installation de bat (alternative à cat)
print_message "Installation de bat..."
if command -v batcat &> /dev/null; then
    print_warning "bat est déjà installé (sous le nom batcat)"
else
    apt install -y bat
    print_success "bat installé"
fi

# Installation de micro (éditeur de texte)
print_message "Installation de micro..."
if command -v micro &> /dev/null; then
    print_warning "micro est déjà installé"
else
    # Installation directe via leur script
    curl https://getmic.ro | bash
    mv micro /usr/local/bin/
    print_success "micro installé"
fi

# Installation de tmux
print_message "Installation de tmux..."
apt install -y tmux
print_success "tmux installé"

# Installation de neofetch
print_message "Installation de neofetch..."
apt install -y neofetch
print_success "neofetch installé"

# Installation de fzf (outil de recherche fuzzy)
print_message "Installation de fzf..."
apt install -y fzf
git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
~/.fzf/install --all --no-bash --no-fish
print_success "fzf installé"

# Installation de scripts utilitaires personnalisés
print_message "Installation de scripts utilitaires..."
mkdir -p /usr/local/sbin/sysadmin

# Scripts utilitaires dans /usr/local/sbin/sysadmin
cat > /usr/local/sbin/sysadmin/system-info.sh << 'EOL'
#!/bin/bash
# Affiche des informations détaillées sur le système

echo "===== INFORMATIONS SYSTÈME ====="
echo "Date/Heure: $(date)"
echo "Uptime: $(uptime -p)"
echo "Kernel: $(uname -r)"

echo -e "\n===== PROCESSEUR ====="
lscpu | grep -E "Model name|CPU\(s\)|CPU MHz"

echo -e "\n===== MÉMOIRE ====="
free -h

echo -e "\n===== ESPACE DISQUE ====="
df -h | grep -v "tmpfs"

echo -e "\n===== CHARGE SYSTÈME ====="
cat /proc/loadavg

echo -e "\n===== UTILISATEURS CONNECTÉS ====="
who

echo -e "\n===== INTERFACES RÉSEAU ====="
ip -br addr show

echo -e "\n===== PORTS EN ÉCOUTE ====="
ss -tuln | grep LISTEN

echo -e "\n===== JOURNAUX SYSTÈME RÉCENTS ====="
journalctl -p err --since "1 hour ago" --no-pager | tail -n 10
EOL
chmod +x /usr/local/sbin/sysadmin/system-info.sh

cat > /usr/local/sbin/sysadmin/monitor-services.sh << 'EOL'
#!/bin/bash
# Monitore l'état des services critiques

services=("ssh" "nginx" "apache2" "mysql" "postgresql" "docker" "cron")

echo "===== STATUT DES SERVICES ====="
for service in "${services[@]}"; do
    status=$(systemctl is-active $service 2>/dev/null)
    if [ "$status" == "active" ]; then
        echo -e "[\e[32mACTIF\e[0m] $service"
    elif [ "$status" == "inactive" ]; then
        echo -e "[\e[31mINACTIF\e[0m] $service"
    else
        echo -e "[\e[33mNON INSTALLÉ\e[0m] $service"
    fi
done
EOL
chmod +x /usr/local/sbin/sysadmin/monitor-services.sh

cat > /usr/local/sbin/sysadmin/scan-network.sh << 'EOL'
#!/bin/bash
# Scanne le réseau local pour les hôtes actifs

if ! command -v nmap &> /dev/null; then
    echo "nmap n'est pas installé. Installation..."
    apt update && apt install -y nmap
fi

# Détection du réseau local
ip_info=$(ip route | grep default | head -n 1)
if [ -z "$ip_info" ]; then
    echo "Impossible de détecter le réseau. Veuillez spécifier un réseau (ex: 192.168.1.0/24):"
    read network
else
    interface=$(echo $ip_info | awk '{print $5}')
    network=$(ip -o -f inet addr show $interface | awk '{print $4}')
    echo "Réseau détecté: $network sur l'interface $interface"
fi

echo "Scan du réseau $network..."
nmap -sn $network

echo "Scan terminé!"
EOL
chmod +x /usr/local/sbin/sysadmin/scan-network.sh

cat > /usr/local/sbin/sysadmin/backup-config.sh << 'EOL'
#!/bin/bash
# Sauvegarde les fichiers de configuration importants

BACKUP_DIR="/var/backups/config-$(date +%Y%m%d-%H%M)"
mkdir -p $BACKUP_DIR

# Liste des dossiers de configuration à sauvegarder
directories=(
    "/etc/ssh"
    "/etc/nginx"
    "/etc/apache2"
    "/etc/mysql"
    "/etc/php"
    "/etc/systemd"
    "/etc/cron.d"
    "/etc/zsh"
    "/etc/prometheus"
    "/etc/grafana"
)

echo "Sauvegarde des configurations dans $BACKUP_DIR"
for dir in "${directories[@]}"; do
    if [ -d "$dir" ]; then
        echo "Sauvegarde de $dir"
        mkdir -p "$BACKUP_DIR$(dirname $dir)"
        cp -r "$dir" "$BACKUP_DIR$(dirname $dir)/"
    fi
done

# Sauvegarde des fichiers individuels
files=(
    "/etc/fstab"
    "/etc/hosts"
    "/etc/resolv.conf"
    "/etc/network/interfaces"
    "/etc/netplan/*.yaml"
)

for file in "${files[@]}"; do
    for f in $(ls $file 2>/dev/null); do
        if [ -f "$f" ]; then
            echo "Sauvegarde de $f"
            mkdir -p "$BACKUP_DIR$(dirname $f)"
            cp "$f" "$BACKUP_DIR$(dirname $f)/"
        fi
    done
done

# Création d'une archive
tar -czf "$BACKUP_DIR.tar.gz" "$BACKUP_DIR"
rm -rf "$BACKUP_DIR"

echo "Sauvegarde terminée: $BACKUP_DIR.tar.gz"
EOL
chmod +x /usr/local/sbin/sysadmin/backup-config.sh

cat > /usr/local/sbin/sysadmin/optimize-system.sh << 'EOL'
#!/bin/bash
# Optimise le système en nettoyant les fichiers inutiles et en ajustant les paramètres

echo "===== OPTIMISATION DU SYSTÈME ====="

# Nettoyer les paquets
if command -v apt &> /dev/null; then
    echo "Nettoyage des paquets apt..."
    apt autoremove -y
    apt clean
fi

# Nettoyer le cache
echo "Nettoyage des caches système..."
rm -rf /var/cache/apt/archives/*.deb
journalctl --vacuum-time=7d

# Nettoyer les logs anciens
echo "Nettoyage des logs anciens..."
find /var/log -type f -name "*.gz" -delete
find /var/log -type f -name "*.old" -delete
find /var/log -type f -name "*.1" -delete

# Optimisation du swap
echo "Optimisation du swap..."
sysctl vm.swappiness=10
echo "vm.swappiness=10" > /etc/sysctl.d/99-swappiness.conf

# Optimisation TCP
echo "Optimisation TCP..."
cat > /etc/sysctl.d/99-network.conf << EOF
# Augmenter les performances réseau
net.core.rmem_max = 16777216
net.core.wmem_max = 16777216
net.ipv4.tcp_rmem = 4096 87380 16777216
net.ipv4.tcp_wmem = 4096 65536 16777216
net.ipv4.tcp_keepalive_time = 600
net.ipv4.tcp_keepalive_probes = 5
net.ipv4.tcp_keepalive_intvl = 15
EOF

# Appliquer les changements
sysctl --system

echo "Optimisation du système terminée!"
EOL
chmod +x /usr/local/sbin/sysadmin/optimize-system.sh

# Créer un script de mise à jour simple
cat > /usr/local/sbin/update-system << 'EOL'
#!/bin/bash
# Script de mise à jour du système avec notification

echo "===== MISE À JOUR DU SYSTÈME ====="
echo "Date: $(date)"

# Mettre à jour la liste des paquets
echo "Mise à jour de la liste des paquets..."
apt update

# Vérifier les mises à jour de sécurité
echo "Mises à jour de sécurité disponibles:"
apt list --upgradable | grep -i security

# Mettre à jour tous les paquets
echo "Installation des mises à jour..."
apt upgrade -y

# Mettre à jour également les paquets de distribution
echo "Mises à jour de distribution..."
apt dist-upgrade -y

# Nettoyer
echo "Nettoyage du système..."
apt autoremove -y
apt clean

echo "Mise à jour terminée à $(date)"
EOL
chmod +x /usr/local/sbin/update-system

# Créer un alias pour tous les scripts
echo '#!/bin/bash
case "$1" in
    "info"|"system-info")
        /usr/local/sbin/sysadmin/system-info.sh
        ;;
    "monitor"|"services")
        /usr/local/sbin/sysadmin/monitor-services.sh
        ;;
    "scan"|"network")
        /usr/local/sbin/sysadmin/scan-network.sh
        ;;
    "backup"|"backup-config")
        /usr/local/sbin/sysadmin/backup-config.sh
        ;;
    "optimize"|"clean")
        /usr/local/sbin/sysadmin/optimize-system.sh
        ;;
    *)
        echo "Usage: sysadmin [info|monitor|scan|backup|optimize]"
        ;;
esac' > /usr/local/sbin/sysadmin-tools
chmod +x /usr/local/sbin/sysadmin-tools
ln -sf /usr/local/sbin/sysadmin-tools /usr/local/sbin/sysadmin

print_success "Scripts utilitaires installés"

# Configuration de ZSH pour l'utilisateur root
print_message "Configuration de ZSH pour root..."

# Configuration de ZSH pour l'utilisateur root
print_message "Configuration de ZSH pour root..."

cat > /root/.zshrc << 'EOL'
# Activer Powerlevel10k
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Path vers Oh-My-Zsh
export ZSH="$HOME/.oh-my-zsh"

# Thème
ZSH_THEME="powerlevel10k/powerlevel10k"

# Plugins
plugins=(
  git
  docker
  docker-compose
  sudo
  tmux
  systemd
  zsh-autosuggestions
  zsh-syntax-highlighting
  zsh-completions
  history
  fzf
  dirhistory
  copypath
  copybuffer
  jsontools
  extract
)

source $ZSH/oh-my-zsh.sh

# Alias utiles pour un administrateur système
alias ls='lsd'
alias l='ls -l'
alias la='ls -la'
alias lt='ls --tree'
alias ll='ls -la'
alias cat='batcat --paging=never'
alias top='htop'
alias ping='ping -c 4'
alias df='df -h'
alias du='du -h'
alias free='free -h'
alias update='sudo /usr/local/sbin/update-system'
alias ports='ss -tulpn'
alias myip='curl -s ifconfig.me'
alias ipinfo='curl ifconfig.me/all && echo'
alias history='history | grep'
alias zshrc='micro ~/.zshrc'
alias reload='source ~/.zshrc'
alias sysinfo='sudo /usr/local/sbin/sysadmin info'
alias services='sudo /usr/local/sbin/sysadmin monitor'
alias netscan='sudo /usr/local/sbin/sysadmin scan'
alias backupconf='sudo /usr/local/sbin/sysadmin backup'
alias optimize='sudo /usr/local/sbin/sysadmin optimize'

# Alias pour la navigation
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'
alias ~='cd ~'

# Alias de surveillance système
alias psmem='ps auxf | sort -nr -k 4 | head -10'
alias pscpu='ps auxf | sort -nr -k 3 | head -10'
alias meminfo='free -m -l -t'
alias cpuinfo='lscpu'
alias gpuinfo='lspci | grep -i nvidia'
alias diskinfo='df -h; echo; lsblk -f'
alias netinfo='ip -c a; echo; ip -c route'
alias sockets='ss -tulanp'
alias connections='netstat -nat | grep ESTABLISHED | awk "{print \$5}" | cut -d: -f1 | sort | uniq -c | sort -rn'
alias openports='netstat -tulanp | grep LISTEN'
alias kernelinfo='cat /proc/version'
alias logs='lnav'

# Alias Docker
alias dps='docker ps'
alias dpsa='docker ps -a'
alias di='docker images'
alias drmi='docker rmi'
alias drm='docker rm'
alias dexec='docker exec -it'
alias dlogs='docker logs'
alias dinspect='docker inspect'
alias dstop='docker stop'
alias dstart='docker start'
alias dcup='docker-compose up -d'
alias dcdown='docker-compose down'

# Surveillance système
watch-cpu() { watch -n 1 "mpstat 1 1 | tail -n 1" }
watch-mem() { watch -n 1 "free -h" }
watch-io() { watch -n 1 "iostat -xz 1 1" }
watch-net() { watch -n 1 "netstat -tun | grep -v WAIT" }

# Fonctions utiles
extract() {
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xjf $1     ;;
      *.tar.gz)    tar xzf $1     ;;
      *.bz2)       bunzip2 $1     ;;
      *.rar)       unrar e $1     ;;
      *.gz)        gunzip $1      ;;
      *.tar)       tar xf $1      ;;
      *.tbz2)      tar xjf $1     ;;
      *.tgz)       tar xzf $1     ;;
      *.zip)       unzip $1       ;;
      *.Z)         uncompress $1  ;;
      *.7z)        7z x $1        ;;
      *)           echo "'$1' ne peut pas être extrait via extract()" ;;
    esac
  else
    echo "'$1' n'est pas un fichier valide"
  fi
}

# Fonction pour lister les processus consommant le plus de ressources
topcpu() {
  ps -eo pid,ppid,cmd,%mem,%cpu --sort=-%cpu | head -n ${1:-10}
}

topmem() {
  ps -eo pid,ppid,cmd,%mem,%cpu --sort=-%mem | head -n ${1:-10}
}

# Recherche dans l'historique avec fzf
fh() {
  print -z $( ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac | sed -E 's/ *[0-9]*\*? *//' | sed -E 's/\\/\\\\/g')
}

# Recherche de fichiers avec fzf
ff() {
  find ${1:-.} -type f -name "${2:-*}" | fzf
}

# Fonction pour générer un mot de passe aléatoire
genpass() {
  local length=${1:-20}
  tr -dc 'A-Za-z0-9!#$%&()*+,-./:;<=>?@[\]^_`{|}~' </dev/urandom | head -c $length ; echo
}

# Activer fzf
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# Configuration pour bat (alias batcat sur Ubuntu)
export BAT_THEME="TwoDark"

# Recherche améliorée avec fzf
export FZF_DEFAULT_OPTS="--height 40% --layout=reverse --border --preview='batcat --color=always {}'"
export FZF_DEFAULT_COMMAND="fd --type f --hidden --follow --exclude .git"
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"

# Completion améliorée
zstyle ':completion:*' completer _expand _complete _ignored _approximate
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'
zstyle ':completion:*' menu select=2
zstyle ':completion:*' select-prompt '%SScrolling active: current selection at %p%s'
zstyle ':completion:*:descriptions' format '-- %d --'
zstyle ':completion:*:processes' command 'ps -au$USER'
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'

# Créer un répertoire et y accéder
mkcd() { mkdir -p "$1" && cd "$1"; }

# Fonction de sauvegarde rapide
bak() {
  cp -a "$1" "$1.bak_$(date +%Y%m%d-%H%M%S)"
  echo "Backup créé: $1.bak_$(date +%Y%m%d-%H%M%S)"
}

# Calcul d'empreinte de fichier
md5check() { md5sum "$1" | awk '{print $1}'; }
sha256check() { sha256sum "$1" | awk '{print $1}'; }

# Rechargement rapide des services courants
reload-service() {
  if [ -z "$1" ]; then
    echo "Usage: reload-service service_name"
    return 1
  fi
  sudo systemctl restart "$1"
  sudo systemctl status "$1"
}

# Exécuter neofetch au démarrage du terminal
neofetch

# Pour charger la configuration Powerlevel10k
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
EOL

# Configuration de base de Powerlevel10k
cat > /root/.p10k.zsh << 'EOL'
# Config de base p10k - sera écrasée lors du premier lancement
# Generated by Powerlevel10k configuration wizard
'builtin' 'local' '-a' 'p10k_config_opts'
[[ ! -o 'aliases'         ]] || p10k_config_opts+=('aliases')
[[ ! -o 'sh_glob'         ]] || p10k_config_opts+=('sh_glob')
[[ ! -o 'no_brace_expand' ]] || p10k_config_opts+=('no_brace_expand')
'builtin' 'setopt' 'no_aliases' 'no_sh_glob' 'brace_expand'

() {
  emulate -L zsh -o extended_glob

  unset -m '(POWERLEVEL9K_*|DEFAULT_USER)~POWERLEVEL9K_GITSTATUS_DIR'

  typeset -g POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(os_icon dir vcs)
  typeset -g POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(status command_execution_time background_jobs ram load)
  
  typeset -g POWERLEVEL9K_MODE=nerdfont-complete
  typeset -g POWERLEVEL9K_PROMPT_ON_NEWLINE=true
  typeset -g POWERLEVEL9K_MULTILINE_LAST_PROMPT_PREFIX='%F{blue}╰─%F{green}❯%F{yellow}❯%F{red}❯%f '
}
EOL

print_success "ZSH configuré pour root"

# Configuration pour les nouveaux utilisateurs
print_message "Configuration du template pour les nouveaux utilisateurs..."

mkdir -p /etc/skel/.oh-my-zsh/custom/themes
mkdir -p /etc/skel/.oh-my-zsh/custom/plugins

# Copier les configurations
cp -r /root/.oh-my-zsh/* /etc/skel/.oh-my-zsh/
cp /root/.zshrc /etc/skel/
cp /root/.p10k.zsh /etc/skel/

# Définir ZSH comme shell par défaut pour les nouveaux utilisateurs
sed -i 's|SHELL=/bin/bash|SHELL=/bin/zsh|' /etc/default/useradd

print_success "Configuration pour les nouveaux utilisateurs terminée"

# Demander à l'utilisateur s'il veut changer le shell pour l'utilisateur courant
read -p "Voulez-vous changer le shell par défaut pour l'utilisateur root en ZSH? (o/n): " change_shell
if [[ "$change_shell" =~ ^[oO]$ ]]; then
    chsh -s $(which zsh)
    print_success "Shell changé en ZSH pour root"
fi

# Configurer micro
print_message "Configuration de micro..."
mkdir -p /root/.config/micro
cat > /root/.config/micro/settings.json << 'EOL'
{
    "autoclose": true,
    "autoindent": true,
    "autosave": false,
    "basename": false,
    "colorcolumn": 0,
    "colorscheme": "monokai",
    "cursorline": true,
    "eofnewline": false,
    "fastdirty": true,
    "fileformat": "unix",
    "ftoptions": true,
    "ignorecase": false,
    "indentchar": " ",
    "infobar": true,
    "keepautoindent": false,
    "keymenu": false,
    "linter": true,
    "literate": true,
    "matchbrace": true,
    "mouse": true,
    "pluginchannels": [
        "https://raw.githubusercontent.com/micro-editor/plugin-channel/master/channel.json"
    ],
    "pluginrepos": [],
    "rmtrailingws": true,
    "ruler": true,
    "savecursor": true,
    "savehistory": true,
    "saveundo": true,
    "scrollbar": true,
    "scrollmargin": 3,
    "scrollspeed": 2,
    "softwrap": true,
    "splitbottom": true,
    "splitright": true,
    "statusline": true,
    "sucmd": "sudo",
    "syntax": true,
    "tabmovement": false,
    "tabsize": 4,
    "tabstospaces": true,
    "termtitle": false,
    "useprimary": true
}
EOL
print_success "micro configuré"

# Configuration de tmux
print_message "Configuration de tmux..."
cat > /root/.tmux.conf << 'EOL'
# Configuration tmux pour administrateur système

# Améliorer les couleurs
set -g default-terminal "screen-256color"

# Changer le préfixe de Ctrl+b à Ctrl+a
unbind C-b
set-option -g prefix C-a
bind-key C-a send-prefix

# Configuration de base
set -g history-limit 10000
set -g allow-rename off
set -g base-index 1
setw -g pane-base-index 1

# Raccourcis utiles
bind r source-file ~/.tmux.conf \; display "Configuration rechargée!"
bind | split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"
bind c new-window -c "#{pane_current_path}"

# Navigation entre les panneaux (style vim)
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# Redimensionner les panneaux
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

# Activer la souris
set -g mouse on

# Status bar
set -g status-position bottom
set -g status-style bg=colour234,fg=colour137
set -g status-left ''
set -g status-right '#[fg=colour233,bg=colour241,bold] %d/%m #[fg=colour233,bg=colour245,bold] %H:%M:%S '
set -g status-right-length 50
set -g status-left-length 20

# Messages
set -g message-style fg=colour232,bg=colour166,bold
EOL
print_success "tmux configuré"

# Installation et configuration de vim amélioré
print_message "Installation et configuration de Vim..."
apt install -y vim
cat > /root/.vimrc << 'EOL'
" Configuration Vim pour administrateur système
syntax on
set number
set relativenumber
set autoindent
set expandtab
set tabstop=4
set shiftwidth=4
set smarttab
set softtabstop=4
set mouse=a
set cursorline
set showmatch
set incsearch
set hlsearch
set ignorecase
set smartcase
set wildmenu
set wildmode=list:longest
set clipboard=unnamed
set history=1000
set undolevels=1000
set title
set visualbell
set noerrorbells
set backspace=indent,eol,start
EOL
print_success "Vim configuré"

# Afficher un résumé final
print_message "Installation terminée!"
echo "Les outils suivants ont été installés et configurés:"
echo "- ZSH avec Oh-My-Zsh et le thème Powerlevel10k"
echo "- lsd (ls deluxe - alternative à ls)"
echo "- bat (alternative à cat)"
echo "- micro (éditeur de texte moderne)"
echo "- tmux (multiplexeur de terminal)"
echo "- neofetch (affichage d'informations système)"
echo "- htop (alternative à top)"
echo "- fzf (recherche fuzzy)"
echo "- Autres outils d'administration système"
echo ""
echo "Pour utiliser la nouvelle configuration ZSH, déconnectez-vous et reconnectez-vous"
echo "ou exécutez: exec zsh"
echo ""
echo "La première fois que vous lancerez ZSH, vous serez invité à configurer Powerlevel10k."
echo ""
echo "Profitez de votre nouvel environnement d'administration système!"
